disabled_rules: # 사용하지 않는 룰
    # if 문에서 리턴을 할경우 바로 return을 쓰면 안됩니다
    # guard else를 권장하지만 따로 제한하지 않습니다.
    - conditional_returns_on_newline

    # 탭을 필요없이 두번이상 하지 않습니다
    # 가독성측면에서 따로 제한하지 않습니다.
    - indentation_width

    # 클로저 닫는 괄호는 시작위치와 같아야 합니다
    # 되도록이면 통일시키는것이 좋지만, 강제하지 않습니다.
    - closure_end_indentation

    # 사용자 지정규칙 사용
    - custom_rules

    # collection은 옵셔널을 사용하지 않도록 합니다
    - discouraged_optional_collection

    # enum의 case이름은 겹치지 않도록 합니다
    # 되도록이면 안겹치게 이용하는게 좋지만, 제한하지 않습니다.
    - duplicate_enum_cases

    # xctest내용이 비어있지 않도록 합니다
    - empty_xctest_method

    # 접근제어자를 필수로 입력해야합니다
    - explicit_acl

    # 최상이 선언들은 접근 제어를 붙여야 합니다
    - explicit_top_level_acl

    # enum의 raw값을 필수로 입력해야 합니다
    - explicit_enum_raw_value

    # 명시적 init 호출은 피합니다
    # 개인적인 스타일로 init을 사용하지 않습니다, 하지만 예외의 경우때문에 사용하지 않게 처리합니다.
    - explicit_init

    # fallthrough 대신 case를 붙여 사용합니다
    - fallthrough

    # file header의 주석은 프로젝트의 주석 패턴과 일치해야합니다
    - file_header

    # % 연산자 대신 함수를 이용합니다
    - legacy_multiple

    # 변수 선언자(let, var)는 빈줄로 다른 구문과 구분해야 합니다
    - let_var_whitespace

    # open과 public에는 문서를 작성해야합니다.
    - missing_docs

    # 두개이상의 클로저를 사용할땐 후행형태를 사용하지 않습니다
    - multiple_closures_with_trailing_closure

    # 익스텐션을 한 파일안에서 그룹화 목적으로 사용해서는 안됩니다
    - no_grouping_extension

    # 이미지 / 컬러의 경우 생성 대신 리터럴로 이용합니다.
    - object_literal

    # 최상위 변수에는 k 접두사를 붙입니다.
    - prefixed_toplevel_constant

    # 인터페이스 빌더를 이용하여 객체를 생성하지 않습니다.
    - prohibited_interface_builder

    # enum의 항목이 카멜케이스라면, 원시값을 가져야 합니다
    - raw_value_for_camel_cased_codable_enum

    # 타입추론이 가능할 때, 따로 타입을 명시하지 않습니다.
    - redundant_type_annotation

    # class에 명시적인 deinit이 있어야 합니다.
    - required_deinit

    # fileprivate는 지양합니다.
    - strict_fileprivate

    # @IBOutlet 변수는 strong로 선언되어야 합니다
    - strong_iboutlet

    # 후위클로저로 사용이 가능할때는, 후위클로저를 사용합니다
    # 권장하지만, 강제하지 않습니다.
    - trailing_closure

    # 파일은 항상 빈줄로 끝나야 합니다
    # 권장하지만, 강제하지 않습니다.
    - trailing_newline

    # 라인의 마지막에 빈 여백이 있으면 안됩니다
    # 권장하지만, 강제하지 않습니다.
    - trailing_whitespace

    # type안에 순서를 강제합니다.
    # 권장하지만, 강제하지 않습니다.
    - type_contents_order

    # 구현되지 않은 기능은 사용할수 없게 표시해야 합니다 (unavailable 추가)
    - unavailable_function

    # try-catch에서, catch문에 error는 반드시 타입캐스팅을 해야 합니다
    - untyped_error_in_catch

    # 변수 선언 후 한번 이상은 사용해야 합니다
    - unused_declaration

    # case문에서, case마다 한줄로 처리가 되지 않는다면, 빈줄이 하나 있어야 합니다
    - vertical_whitespace_between_cases

    # 컬러/이미지를 리터럴이 아닌 named로 사용해야 합니다
    - discouraged_object_literal

    # class only protocol에서 class 대신 AnyObject를 사용합니다
    # Swift5부터 변경되었기 때문에 따로 쓰지 않습니다
    - anyobject_protocol

    # kvo 사용시 block형태로 사용
    # kvo를 사용한적이 없어서 실제 상황과 마주한적이 없어 disable 시켜둡니다.
    - block_based_kvo

    # 델리게이트 프로토콜은 반드시 클래스를 채택하여야 합니다
    # AnyObject로 변경되기도 했고, 명시를 기본적으로 하기때문에 제한하지 않습니다
    - class_delegate_protocol

    # 컴파일러 프로토콜에서 선언된 생성자는 직접 호출하면 안됩니다
    # 사용할일이 없을것같아서 따로 제한하지 않았습니다
    - compiler_protocol_init

    # case와 return은 한줄에 있으면 안됩니다
    - switch_case_on_newline

    # 딕셔너리나 배열의 마지막에 ,를 넣지 않습니다
    - trailing_comma

    # 사용하지 않는 제어문 이름은 제거해야합니다
    - unused_control_flow_label
    
    # 변수 선언에는 반드시 타입을 명시해야 합니다
    - explicit_type_interface

    # 옵저버는 deinit에서 제거해야 합니다
    - notification_center_detachment
    
    # 여닫는 괄호 위에 빈줄이 있으면 안됩니다
    # 매번 적절한 상황 판단이 필요합니다. 쓸모없는 warning만 올려주는 규칙 같습니다.
    - vertical_whitespace_opening_braces
    - vertical_whitespace_closing_braces
    
    # 수직으로는 여백이 2줄이상 생기면 안됩니다
    # 위와 같은 이유로 disable 합니다
    # 화면이 공란으로 보일 수준이 아니라면, 가독성과 관련 없어 보입니다.
    - vertical_whitespace
    
    # 파일 이름은 파일안의 타입과 일치해야 합니다
    # extension, util 같은 파일은 일치하지 않을 수 있습니다.
    # 그럴때는 '// swiftlint:disable:this file_name' 커맨드를 이용합니다.
    # https://github.com/realm/SwiftLint/issues/2277#issuecomment-441244874
    # 여러번 사용하다 보니, Utility성 함수, 변수들을 정의할때마다 disable을 해줘야합니다.
    # 파일 네이밍 보다, 위의 상황에 시간소모가 더해져 disable 합니다
    - file_name

opt_in_rules: #사용하는 룰
    # 아규먼트들은 한줄에 있거나, 각각 따로 있어야 합니다
    - multiline_arguments

    # 아규먼트 괄호도 한줄에 있거나 각각따로 있어야 합니다
    - multiline_arguments_brackets

    # 함수 체이닝도 한줄에 있거나 따로 있어야 합니다
    - multiline_function_chains

    # 리터럴 괄호도 한줄에 있거나 따로 있어야 합니다
    - multiline_literal_brackets

    # 파라미터 괄호도 한줄에있거나 따로 있어야 합니다
    - multiline_parameters_brackets

    #옵저버를 블록에서 등록할때 나중에 해제하기 위해 변수로 저장해야합니다
    - discarded_notification_center_observer

    # Boolean은 옵셔널을 사용하지 않도록 합니다
    - discouraged_optional_boolean

    # 인스턴스의 변수, 함수는 'self'를 붙여 접근합니다
    - explicit_self

    # 옵셔널 타입을 강제로 언래핑하지 않습니다
    - force_unwrapping

    # 타입을 강제로 타입캐스팅 하지 않습니다
    - force_cast

    # 라인의 길이를 제한합니다
    - line_length

    # 캡쳐링(익명함수 블럭)시, unowned보다는 weak를 선호합니다
    # 옵셔널에 의한 차이인데, 강제 옵셔널을 배제하기 위한 방법으로 추정됩니다.
    - unowned_variable_capture

    # todo는 해결해야 합니다
    - todo

    # map에서 $0 혹은 $N 만 이용하도록 합니다
    - array_init

    # 속성(@objc, @IB~~~~)값은 라인 구분을 하지 않도록 합니다
    - attributes

    # 닫는 괄호에는 공백이 없어야 합니다 (빈줄은 가능)
    - closing_brace

    # 클로저 인자는 시작 위치에 있어야 합니다
    - closure_parameter_position

    # 클로저 괄호 사이에는 공백이 있어야 합니다
    - closure_spacing

    # 콜렉션들의 수직 위치가 동일해야 합니다
    - collection_alignment

    # 콜론(:), 콤마(,) 사용 시 뒤에만 여백이 있어야 합니다
    - colon
    - comma

    # 필터링된 콜렉션의 갯수를 0, empty와 비교하지 않습니다
    - contains_over_filter_count
    - contains_over_filter_is_empty

    # first, rang에서 nil 체크를 하지 않습니다
    - contains_over_first_not_nil
    - contains_over_range_nil_comparison

    # if, for, guard, swift, while, catch같은 분기에 불필요한 괄호를 사용하지 않습니다
    - control_statement

    # 상속받지않고, static변수만 가지고 있을 경우 열거형으로만 타입을 정의합니다
    - convenience_type

    # 함수의 순환복잡도를 제한합니다
    - cyclomatic_complexity

    # 타겟보다 낮은버전의 @available 을 사용하지 않습니다
    - deployment_target

    # UIDevice, Bundle같은 타입은 직접선언하지 않습니다
    - discouraged_direct_init

    # 중복 import를 하지 않습니다
    - duplicate_imports

    # count > 0 대신 isEmpty를 사용합니다
    - empty_count

    # 빈 콜렉션을 체크할때는 isEmpty를 사용합니다
    - empty_collection_literal

    # case에서 enum 아규먼트가 없을 시 표시하지 않습니다
    # ex) case .bar(_): break <- '(_)' 구문을 표시하지 않
    - empty_enum_arguments

    # (Void) -> Void 대신 () -> Void를 사용합니다
    - empty_parameters

    # 클로저의 파라미터가 없을 경우 () 를 사용하지 않습니다
    - empty_parentheses_with_trailing_closure

    # 빈 문자열 체크시 "" 대신 isEmpty를 사용합니다
    - empty_string

    # case의 파라미터는 5개 이하여야 합니다
    - enum_case_associated_values_count

    # todo, fixme는 만료일 이전에 해결해야 합니다
    # TODO: [10/14/2021]
    - expiring_todo

    # fatalError는 메시지가 있어야 합니다
    - fatal_error_message

    # 파일 길이 제한
    - file_length

    # 파일 이름에 공백을 넣지 않습니다 (' ' 대신 '_' 사용)
    - file_name_no_space

    # protocol -> class순으로 타입 순서를 강제합니다
    - file_types_order

    # filter.first 보다는, first(where: )를 사용합니다
    - first_where

    # filter.last 보다는, last(where:)를 사용합니다
    - last_where

    # map과 reduce 보다는 flatmap을 사용합니다
    - flatmap_over_map_reduce

    # for 문안의 if 대신 where를 사용합니다
    # ex) for user in users where user.id.contains("a") {  }
    - for_where

    # force try를 하지 않습니다
    - force_try

    # 기본값을 사용하는 파라미터들을 뒤에 작성합니다
    - function_default_parameter_at_end

    # 함수의 파라미터 갯수를 제한합니다
    - function_parameter_count

    # 유형은 영,숫자만 포함하여 20자 이하여야 합니다
    - generic_type_name

    # 같은 값을 비교하지 않습니다
    - identical_operands

    # 변수나 클래스등의 이름은 카멜케이스를 사용하며, 너무 길거나 짧으면 안됩니다
    - identifier_name

    # 명시할 필요가 없는 getter는 생략합니다
    - implicit_getter

    # 명시할 필요가 없는 return은 생략합니다
    - implicit_return

    # 필요한 상황에만 defer를 사용합니다
    - inert_defer

    # 튜플을 2개이하로 사용합니다. 그 이상은 타입을 정의합니다.
    - large_tuple

    # 파일 시작부분에 빈공간을 사용하지 않습니다
    - leading_whitespace

    # 레거시한 CGRect 함수들을 사용하지 않습니다
    - legacy_cggeometry_functions

    # 레거시한 상수들을 사용하지 않습니다 (CGRectZero, Float(M_PI) 등)
    - legacy_constant

    # 레거시한 생성자를 사용하지 않습니다 (CGRectMake, CGSizeMake 등)
    - legacy_constructor

    # hashValue 보다는 hash(into:)를 사용합니다
    - legacy_hashing

    # 레거시한 NSGeometry 함수를 사용하지 않습니다
    - legacy_nsgeometry_functions

    # arc4random같은 레거시 랜덤 함수를 사용하지 않습니다
    - legacy_random

    # 리터럴들을 표현할 때 그 끝은 시작한 줄의 시작위치와 같아야 합니다
    - literal_expression_end_indentation

    # 하위 접근제어는 상위보다 낮아야 합니다
    - lower_acl_than_parent

    # Mark 주석은 정확한 포맷팅을 이용하여야 합니다
    - marknumber_separator

    # modifier들은 정확한 형식을 사용해야 합니다
    - modifier_order

    # 파라미터들은 1줄마다 있거나, 1줄에 있어야 합니다
    - multiline_parameters

    # 함수는 5중첩을 넘지 않아야 합니다
    - nesting

    # 함수명과 괄호 사이에 공간이 없어야 합니다
    - no_space_in_method_call

    # 중괄호 사용 시 앞에 공백이 있어야 합니다
    - opening_brace

    # 연산자 양옆에는 공백이 있어야 합니다
    - operator_usage_whitespace

    # 연산자 함수를 만들 때 함수 이름 다음에 공백이 있어야 합니다
    - operator_whitespace

    # 스위치 case는 옵셔널을 사용하지 않습니다
    - optional_enum_case_matching

    # 선언에 주석을 달아야 합니다
    - orphaned_doc_comment

    # extension에는 override 하지 않습니다
    - override_in_extension

    # 스위치 case는 패턴을 일치시킵니다
    - pattern_matching_keywords

    # typeof self 대신 Self 를 사용합니다
    - prefer_self_type_over_type_of_self

    # action, outlet은 private로 선언합니다
    - private_action
    - private_outlet

    # fileprivate보다 private를 선호합니다
    - private_over_fileprivate

    # private unittest는 사용하지 않습니다
    - private_unit_test

    # 일부 메서드들은 super를 호출하지 않습니다
    # (loadView, updateLayer 등)
    - prohibited_super_call

    # get, set의 순서를 지킵니다
    - protocol_property_accessors_order

    # let _ = foo() 보다는 _ = foo()를 사용합니다
    - redundant_discardable_let

    # @objc 선언을 중복으로 사용하지 않습니다
    - redundant_objc_attribute

    # optional var 일경우 nil을 대입하지 않아도 Nil이 들어갑니다 이와 같이 nil대입을 중복해서 하지 않습니다
    - redundant_optional_initialization

    # 상위와 같은 접근제어라면 중복사용하지 않습니다
    - redundant_set_access_control

    # enum에서 raw와 enum이 같다면 raw를 적지 않습니다
    - redundant_string_enum_value

    # 함수 선언에서 불필요한 void reutrn은 사용하지 않습니다
    - redundant_void_return

    # return 화살표 양옆으로 공백이 있어야 합니다
    - return_arrow_whitespace

    # += -= *= /= 같은 짧은 연산자를 사용합니다
    - shorthand_operator

    # sorted().first, sorted().last보다 min() 또는 max()를 사용합니다
    - sorted_first_last

    # else와 catch는 이전 선언(닫는 괄호)과 같은 줄에 있어야 합니다
    - statement_position

    # 연산자 함수는 static으로 만들어야 합니다
    - static_operator

    # 스위치에서 case는 switch와 같은 위치에 정렬되어야 합니다
    - switch_case_alignment

    # Array<String>대신 [String] 형태를 사용합니다
    - syntactic_sugar

    # bool = !bool 대신 toggle()을 사용합니다
    - toggle_bool

    # 세미콜론 앞에 공간이 있으면 안됩니다 ('let a ; let b' -> X)
    - trailing_semicolon

    # 타입의 이름 길이 제한
    - type_name

    # 불필요한 break문을 사용하지 않습니다
    - unneeded_break_in_switch

    # 클로저 인수를 선언 할 때는 괄호가 필요하지 않습니다
    - unneeded_parentheses_in_closure_argument

    # 클로저 내의 캡처는 필요할때만 합니다
    - unused_capture_list

    # 사용하지 않는 클로저 파라미터는 _로 표시합니다
    - unused_closure_parameter

    # index를 사용하지 않으면 enumrated를 사용하지 않습니다
    - unused_enumerated

    # 사용하지 않는 import는 제거 합니다
    - unused_import

    # 사용하지 않는 옵셔널 바인딩은 제거 합니다
    - unused_optional_binding

    # set를 사용하지 않으면 제거 합니다
    - unused_setter_value

    # @IBInspectable은 변수에만 적용되어야하며 명시적인 유형을 가지며 지원되는 유형이어야합니다
    - valid_ibinspectable

    # 함수 매개변수들이 여러개일경우 세로로 같은줄에 있어야 합니다
    - vertical_parameter_alignment

    # 함수를 사용할때 인자들이 여러개일경우 세로로 같은줄에 있어야 합니다
    - vertical_parameter_alignment_on_call

    # () -> Void를 사용합니다
    - void_return

    # delegate는 weak로 합니다
    - weak_delegate

    # xctfail에는 메시지가 있어야 합니다
    - xctfail_message

    # 비교 할 때 변수는 왼쪽, 상수는 오른쪽에 있어야 합니다
    - yoda_condition

line_length:
  warning: 400
  error: 500

closure_body_length:
  warning: 40
  warning: 60

function_body_length:
  warning: 40
  warning: 100

type_body_length:
  warning: 500
  error: 600

file_length:
  warning: 400
  error: 600

type_name:
  warning: 20
  error: 40
  
identifier_name:
  max_length:
    warning: 30
    error: 40
  min_length:
    warning: 1
  
reporter: "xcode"
